# -*- coding: utf-8 -*-
from zope.interface import Interface
from zope.component import adapter
from zope.component import getAdapters
from plone.restapi.services import Service
from plone.rest.interfaces import IService
try:
    from urllib.parse import urlparse
except ImportError:
    # Python 2
    from urlparse import urlparse
import traceback


@adapter(Interface, Interface)
class SwaggerDefinitions(Service):

    def get_url_infos(self):
        parsed = urlparse(self.context.absolute_url())
        return (parsed.scheme,
                '%s://%s' % (parsed.scheme, parsed.netloc),
                parsed.path)

    def reply(self):
        protocoll, host, base_path = self.get_url_infos()
        api_description = {
            "swagger": "2.0",
            "info": {
                "description": "generated by plone",
                "version": "1.0.0",
                "title": "plone restapi documentation",
                "host": host,
                "basePath": base_path,
                "schemes": [
                    protocoll
                ],
            },
            "paths": {},
            "externalDocs": {
                "description": "Find out more about restapi",
                "url": "https://plonerestapi.readthedocs.io/en/latest/"
            },
            "definitions": {
            },
            "components": {
                "securitySchemes": {
                    "bearerAuth": {
                       "type": "http",
                       "scheme": "bearer",
                       "bearerFormat": "JWT",
                    },
                },
            },
        }

        adapters = []
        services = {}
        try:
            for (name, callable) in getAdapters((self.context, self.request),
                                                provided=Interface):
                adapters.append((name, callable))
                if IService.providedBy(callable):
                    services[name] = callable
        except Exception:
            traceback.print_exc()

        for (service_name, service) in services.items():
            self.add_service_to_api_description(service, api_description)
        return api_description

    def add_service_to_api_description(self, service, api_description):
        # pathes
        service_doc = getattr(service, '__restapi_doc__', None)
        if service_doc:
            for (path, verbs) in service_doc.items():
                path_description = api_description['paths'].setdefault(
                    path, {})
                # verbs in a path
                for verb, verb_description in verbs.items():
                    if verb in path_description:
                        raise KeyError(
                            '%s %s already exists' % (path, verb))
                    path_description[verb] = verb_description

        # definitions
        definition_doc = getattr(service, '__restapi_doc_definitions__', None)
        if definition_doc:
            for (name, definition) in definition_doc.items():
                if name in api_description['definitions']:
                    raise KeyError('"%s" is already definied' % name)
                api_description['definitions'][name] = definition
        return api_description
