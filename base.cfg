[buildout]
index = https://pypi.python.org/simple
extensions = mr.developer
parts =
    instance
    test
    coverage
    test-coverage
    test-no-uncommitted-doc-changes
    code-analysis
    dependencychecker
    releaser
    pocompile
    i18ndude
    update-translations
    find-untranslated
    sphinxbuilder
    sphinx-python
    deploy-to-heroku
develop = .
sources-dir = extras
auto-checkout =
#    plone.rest

[instance]
recipe = plone.recipe.zope2instance
user = admin:admin
http-address = 8080
deprecation-warnings = on
eggs =
    Plone
    Pillow
    plone.app.debugtoolbar
    plone.restapi [test]
environment-vars =
    zope_i18n_compile_mo_files true

[test]
recipe = zc.recipe.testrunner
eggs = ${instance:eggs}
initialization =
    os.environ['TZ'] = 'UTC'
defaults = ['-s', 'plone.restapi', '--auto-color', '--auto-progress']

[coverage]
recipe = zc.recipe.egg
eggs = coverage

[test-coverage]
recipe = collective.recipe.template
input = inline:
    #!/bin/bash
    export TZ=UTC
    ${buildout:directory}/bin/coverage run bin/test $*
    ${buildout:directory}/bin/coverage html
    ${buildout:directory}/bin/coverage report -m --fail-under=90
    # Fail (exit status 1) if coverage returns exit status 2 (this happens
    # when test coverage is below 100%.
output = ${buildout:directory}/bin/test-coverage
mode = 755

[test-no-uncommitted-doc-changes]
recipe = collective.recipe.template
input = test-no-uncommitted-doc-changes.in
output = bin/test-no-uncommitted-doc-changes
mode = 755


[code-analysis]
recipe = plone.recipe.codeanalysis
directory = ${buildout:directory}/src
flake8-exclude=bootstrap.py,bootstrap-buildout.py,docs,bin,*.egg,setup.py,overrides
flake8-max-complexity = 20
flake8-extensions =
    flake8-coding
    flake8-debugger
    flake8-print
# additional pep8/flake8 rules, see docs for details
# https://pep8.readthedocs.io/en/1.4.6/intro.html#error-codes
# - E123: closing bracket does not match indentation of opening bracketâ€™s line
# flake8-select = E123

[dependencychecker]
recipe = zc.recipe.egg
eggs =
    z3c.dependencychecker
    plone.restapi
scripts = dependencychecker

[releaser]
recipe = zc.recipe.egg
eggs = zest.releaser

[pocompile]
recipe = zc.recipe.egg
eggs = zest.pocompile

[i18ndude]
recipe = zc.recipe.egg
eggs = i18ndude

[update-translations]
recipe = collective.recipe.template
input = inline:
    domain=plone.restapi
    maindir=src/plone/restapi
    locales=$maindir/locales
    echo "Update translations for $domain"
    if [ ! -f $locales/$domain.pot ]; then
        # Create .pot file if it does not exist yet
        touch $locales/$domain.pot
    fi
    if [ ! -f $locales/de/LC_MESSAGES ]; then
        # Create de/LC_MESSAGES directory if it does not exist yet
        mkdir -p $locales/de/LC_MESSAGES
    fi
    if [ ! -f $locales/de/LC_MESSAGES/$domain.po ]; then
        # Create .po file if it does not exist yet
        touch $locales/de/LC_MESSAGES/$domain.po
    fi
    ${buildout:directory}/bin/i18ndude rebuild-pot --pot $locales/$domain.pot --create $domain $maindir
    ${buildout:directory}/bin/i18ndude sync --pot $locales/$domain.pot $locales/*/LC_MESSAGES/$domain.po
output = ${buildout:directory}/bin/update-translations
mode = 755


[find-untranslated]
recipe = collective.recipe.template
input = inline:
    #!/bin/sh
    bin/i18ndude find-untranslated `find -L src/plone/restapi -regex ".*\.[cz]?pt"`
output = ${buildout:directory}/bin/find-untranslated
mode = 755

[sphinxbuilder]
recipe = collective.recipe.sphinxbuilder
source = ${buildout:directory}/docs/source
build = ${buildout:directory}/docs
interpreter = ${buildout:directory}/bin/${sphinx-python:interpreter}

[sphinx-python]
recipe = zc.recipe.egg
eggs =
    sphinx_rtd_theme
    sphinxcontrib-httpdomain
    sphinxcontrib-httpexample
interpreter = sphinxPython

[deploy-to-heroku]
recipe = collective.recipe.template
input = inline:
    #!/bin/bash
    git push heroku master
output = ${buildout:directory}/bin/deploy-to-heroku
mode = 755

[sources]
plone.rest = git git://github.com/plone/plone.rest.git pushurl=git@github.com:plone/plone.rest.git branch=master
plone.schema = git git://github.com/plone/plone.schema.git pushurl=git@github.com:plone/plone.schema.git branch=newjsonschemafield
